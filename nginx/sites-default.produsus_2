server_tokens off; # for security-by-obscurity: stop displaying nginx version

# this section is needed to proxy web-socket connections
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 80;
    server_name opensourcehollywood.org www.opensourcehollywood.org;
    return 301 https://opensourcehollywood.org;
}


server { 
    listen 443 ssl; # managed by Certbot
    
    server_name opensourcehollywood.org;
    

    if ($host = "www.opensourcehollywood.org") {
        return 301 https://opensourcehollywood.org;
    }

    if ($scheme != "https") {
        return 301 https://opensourcehollywood.org;
    } 

    location /.well-known/acme-challenge { 
        root /var/www/letsencrypt;
    }

    location ~ /\. {
        deny all;
    }

    ssl_certificate /etc/letsencrypt/live/opensourcehollywood.org/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/opensourcehollywood.org/privkey.pem; # managed by Certbot

    # performance enhancement for SSL
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_stapling on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;

    # safety enhancement to SSL: make sure we actually use a safe cipher
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000;";

    # If your application is not compatible with IE <= 10, this will redirect visitors to a page advising a browser update
    # This works because IE 11 does not present itself as MSIE anymore
    if ($http_user_agent ~ "MSIE" ) {
        return 303 https://browser-update.org/update.html;
    }

    location ~* "^/[a-z0-9]{40}\.(css|js)$" {
      root /home/produsus/bundle/programs/web.browser;
      access_log off;
      expires max;
    }

    client_max_body_size 100m;

    location / {
                try_files $uri @prerender;
    }

    location @prerender {
                set $prerender 0;
                if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
                        set $prerender 1;
                }
                if ($args ~ "_escaped_fragment_") {
                        set $prerender 1;
                }
                if ($http_user_agent ~ "Prerender") {
                        set $prerender 0;
                }
                if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
                        set $prerender 0;
                }

                #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
                resolver 8.8.8.8;

                if ($prerender = 1) {
                        #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
                        set $prerender "service.prerender.io";
                        rewrite .* /$scheme://$host$request_uri? break;
                        proxy_pass http://$prerender;
                }

                if ($prerender = 0) {
                        set $proxy_host $host;
                }

                proxy_set_header X-Prerender-Token eC8piIJyKkvVkPLhViU1;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade; 
                proxy_set_header Connection 'upgrade'; 
                proxy_set_header Host $host; 
                proxy_cache_bypass $http_upgrade;

                if ($prerender = 0) {
                        proxy_pass http://127.0.0.1:4112; 
                        
                }
    }

}

server { 
    listen 443 ssl; # managed by Certbot
    
    server_name app.opensourcehollywood.org;
    

    if ($host = "www.opensourcehollywood.org") {
        return 301 https://opensourcehollywood.org;
    }

    if ($scheme != "https") {
        return 301 https://opensourcehollywood.org;
    } 

    location /.well-known/acme-challenge { 
        root /var/www/letsencrypt;
    }

    location ~ /\. {
        deny all;
    }

    ssl_certificate /etc/letsencrypt/live/app.opensourcehollywood.org/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/app.opensourcehollywood.org/privkey.pem; # managed by Certbot

    # performance enhancement for SSL
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_stapling on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;

    # safety enhancement to SSL: make sure we actually use a safe cipher
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000;";

    # If your application is not compatible with IE <= 10, this will redirect visitors to a page advising a browser update
    # This works because IE 11 does not present itself as MSIE anymore
    if ($http_user_agent ~ "MSIE" ) {
        return 303 https://browser-update.org/update.html;
    }

    location ~* "^/[a-z0-9]{40}\.(css|js)$" {
      root /home/produsus/bundle/programs/web.browser;
      access_log off;
      expires max;
    }

    client_max_body_size 100m;

    location / {
                try_files $uri @prerender;
    }

    location @prerender {
                set $prerender 0;
                if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
                        set $prerender 1;
                }
                if ($args ~ "_escaped_fragment_") {
                        set $prerender 1;
                }
                if ($http_user_agent ~ "Prerender") {
                        set $prerender 0;
                }
                if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
                        set $prerender 0;
                }

                #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
                resolver 8.8.8.8;

                if ($prerender = 1) {
                        #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
                        set $prerender "service.prerender.io";
                        rewrite .* /$scheme://$host$request_uri? break;
                        proxy_pass http://$prerender;
                }

                if ($prerender = 0) {
                        set $proxy_host $host;
                }

                proxy_set_header X-Prerender-Token eC8piIJyKkvVkPLhViU1;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade; 
                proxy_set_header Connection 'upgrade'; 
                proxy_set_header Host $host; 
                proxy_cache_bypass $http_upgrade;

                if ($prerender = 0) {
                        proxy_pass http://127.0.0.1:8080; 
                        
                }
    }

}

